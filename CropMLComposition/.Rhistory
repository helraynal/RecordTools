cat(saveXML(Model), "\n")
Submodels <- newXMLNode("submodels")
Submodel <- newXMLNode("Model")
SubmodelNode <- sapply( SubmodelName, function(Out) newXMLNode("Submodel", attrs=c(name=Out )))
Submodel <- addChildren(SubmodelNode, Submodel)
Submodel <- addChildren(Submodel, SubmodelNode)
Model <- addChildren( Model, Submodel)
cat(saveXML(Model), "\n")
saveXML(Node1A, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
Submodels <- addChildren(Submodels, SubmodelNode)
Submodel <- addChildren( Submodel, Submodels)
Model <- addChildren( Model, Submodel)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
setwd("C:/Users/hraynal/EspaceTravailBadet/Projets/Projet_MFPC/AMEI/CropML/CropMLComposition")
library("XML")
library("methods")
inputFile <- "EnergyBalance.xml"
result <- xmlTreeParse(file = inputFile)
doc <-xmlParse(inputFile)
ModelComposition<- getNodeSet(doc, "//ModelComposition")
ModelCompositionName<- sapply(ModelComposition, function(el) xmlGetAttr(el, "name"))
CompositionList <- getNodeSet(doc, "//Composition")
SubmodelList <- getNodeSet(doc,"//Model")
SubmodelName <- sapply(ModelList, function(el) xmlGetAttr(el, "name"))
SubmodelDynamic <- sapply(ModelList, function(el) xmlGetAttr(el, "id"))
SubmodelFilename <- sapply(ModelList, function(el) xmlGetAttr(el, "Filename"))
Links <- getNodeSet(doc, "//Links")
InputLink <- getNodeSet(doc, "//InputLink")
InputLinkSourceList <- sapply(InputLink, function(el) xmlGetAttr(el, "source"))
InputLinkSourceTarget <- sapply(InputLink, function(el) xmlGetAttr(el, "target"))
OutputLink <- getNodeSet(doc, "//OutputLink")
OutputLinkSourceList <- sapply(OutputLink, function(el) xmlGetAttr(el, "source"))
OutputLinkSourceTarget <- sapply(OutputLink, function(el) xmlGetAttr(el, "target"))
InternalLink <- getNodeSet(doc, "//InternalLink")
InputernalLinkSourceList <- sapply(InternalLink, function(el) xmlGetAttr(el, "source"))
InputernalLinkSourceTarget <- sapply(InternalLink, function(el) xmlGetAttr(el, "target"))
emptyFile <- "empty2.vpz"
emptyResult <- xmlParse(file = emptyFile)
NodeStructure <- getNodeSet(emptyResult, "//structures")
NodeModel <- getNodeSet(emptyResult,"//model")
NodeDynamics <- getNodeSet(emptyResult, "//dynamics")
NodeExperiment <- getNodeSet(emptyResult, "//experiment")
NodeConditions<- getNodeSet(emptyResult, "//conditions")
NodeSubModels <- getNodeSet(emptyResult, "//submodels")
ModelName<- sapply(ModelList, function(el) xmlGetAttr(el, "name"))
Model <- newXMLNode("model")
addAttributes(Model, y="109", x="53", observables="",
dynamics= paste("dyn",ModelName, sep=""), name=ModelName, height="50",
conditions="", width="50", type="atomic")
ModelName
NodeModel
Model <- newXMLNode("model")
addAttributes(Model, y="109", x="53", observables="",
name=ModelCompositionName, height="50",
conditions="", width="50", type="coupled")
cat(saveXML(Model), "\n")
Submodels <- newXMLNode("submodels")
Submodel <- newXMLNode("Model")
SubmodelNode <- sapply( SubmodelName, function(Out) newXMLNode("Submodel", attrs=c(name=Out )))
Submodels <- addChildren(Submodels, SubmodelNode)
Submodel <- addChildren( Submodel, Submodels)
Model <- addChildren( Model, Submodel)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
Connections <- newXMLNode("Connections")
Connection <- newXMLNode("Connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
InternalLink <- getNodeSet(doc, "//InternalLink")
InternalLinkSourceList <- sapply(InternalLink, function(el) xmlGetAttr(el, "source"))
InternalLinkTargetList <- sapply(InternalLink, function(el) xmlGetAttr(el, "target"))
Connections <- newXMLNode("Connections")
Connection <- newXMLNode("Connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, target)
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connection
For (i in 1:length(InternalLinkTargetList)) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
For (i in 1:length(InternalLinkTargetList)) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
For (i in 1:length(InternalLinkTargetList)) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
length(InternalLinkTargetList)
cmpt <- length(InternalLinkTargetList)
For (i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
For (i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connection)
}
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
destination <- sapply( InternalLinkTargetList, function(Out) newXMLNode("target"))
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
origin
origin <- sapply( InternalLinkSourceList, function(Out) newXMLNode("origin"))
origin
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin", attrs=c(model="...", port="..."))
destination <-  newXMLNode("destination", attrs=c(model="...", port="...") )
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin", attrs=c(model="...", port="..."))
destination <-  newXMLNode("destination", attrs=c(model="...", port="...") )
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
temp <- strsplit(InternalLinkTargetList,".")
temp
InternalLinkTargetList
cmpt <- length(InternalLinkTargetList)
temp <- strsplit(InternalLinkTargetList[1],".")
temp
InternalLinkTargetList[1]
strsplit(InternalLinkTargetList[1],".")
InternalLinkTargetList[1]
strsplit(InternalLinkTargetList[1],"Evaporation")
strsplit(InternalLinkTargetList[1],".")
strsplit(InternalLinkTargetList[1],"\.")
strsplit(InternalLinkTargetList[1],".",fixed = TRUE)
origin <- newXMLNode("origin", attrs=c(model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port="..."))
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin", attrs=c(model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port="..."))
destination <-  newXMLNode("destination", attrs=c(model="...", port="...") )
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
Connections <- newXMLNode("Connections")
#All connections
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes=(origin, model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2])
destination <-  newXMLNode("destination")
addAttributes=(origin, model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
Connections <- newXMLNode("Connections")
#All connections
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes=(origin, model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2])
destination <-  newXMLNode("destination")
addAttributes=(origin, model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
setwd("C:/Users/hraynal/EspaceTravailBadet/Projets/Projet_MFPC/AMEI/CropML/CropMLComposition")
library("XML")
library("methods")
inputFile <- "EnergyBalance.xml"
result <- xmlTreeParse(file = inputFile)
doc <-xmlParse(inputFile)
ModelComposition<- getNodeSet(doc, "//ModelComposition")
ModelCompositionName<- sapply(ModelComposition, function(el) xmlGetAttr(el, "name"))
CompositionList <- getNodeSet(doc, "//Composition")
SubmodelList <- getNodeSet(doc,"//Model")
SubmodelName <- sapply(ModelList, function(el) xmlGetAttr(el, "name"))
SubmodelDynamic <- sapply(ModelList, function(el) xmlGetAttr(el, "id"))
SubmodelFilename <- sapply(ModelList, function(el) xmlGetAttr(el, "Filename"))
Links <- getNodeSet(doc, "//Links")
InputLink <- getNodeSet(doc, "//InputLink")
InputLinkSourceList <- sapply(InputLink, function(el) xmlGetAttr(el, "source"))
InputLinkSourceTarget <- sapply(InputLink, function(el) xmlGetAttr(el, "target"))
OutputLink <- getNodeSet(doc, "//OutputLink")
OutputLinkSourceList <- sapply(OutputLink, function(el) xmlGetAttr(el, "source"))
OutputLinkSourceTarget <- sapply(OutputLink, function(el) xmlGetAttr(el, "target"))
InternalLink <- getNodeSet(doc, "//InternalLink")
InternalLinkSourceList <- sapply(InternalLink, function(el) xmlGetAttr(el, "source"))
InternalLinkTargetList <- sapply(InternalLink, function(el) xmlGetAttr(el, "target"))
emptyFile <- "empty2.vpz"
emptyResult <- xmlParse(file = emptyFile)
NodeStructure <- getNodeSet(emptyResult, "//structures")
NodeModel <- getNodeSet(emptyResult,"//model")
NodeDynamics <- getNodeSet(emptyResult, "//dynamics")
NodeExperiment <- getNodeSet(emptyResult, "//experiment")
NodeConditions<- getNodeSet(emptyResult, "//conditions")
NodeSubModels <- getNodeSet(emptyResult, "//submodels")
ModelName<- sapply(ModelList, function(el) xmlGetAttr(el, "name"))
Model <- newXMLNode("model")
addAttributes(Model, y="109", x="53", observables="",
name=ModelCompositionName, height="50",
conditions="", width="50", type="coupled")
cat(saveXML(Model), "\n")
Submodels <- newXMLNode("submodels")
Submodel <- newXMLNode("Model")
SubmodelNode <- sapply( SubmodelName, function(Out) newXMLNode("Submodel", attrs=c(name=Out )))
Submodels <- addChildren(Submodels, SubmodelNode)
Submodel <- addChildren( Submodel, Submodels)
Model <- addChildren( Model, Submodel)
cat(saveXML(Model), "\n")
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes=(origin, model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2])
destination <-  newXMLNode("destination")
addAttributes=(origin, model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes=(origin, model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2])
destination <-  newXMLNode("destination")
addAttributes=(origin, model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes <- (origin, model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2])
destination <-  newXMLNode("destination")
addAttributes<- (origin, model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1], port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes(origin ,
model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1] ,
port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2] )
destination <-  newXMLNode("destination")
addAttributes(origin,
model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[1],
port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
Connections <- newXMLNode("Connections")
cmpt <- length(InternalLinkTargetList)
cmpt<-1
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))
InternalLinkSourceList[cmpt]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1][1]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2] )
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[2]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[1]
(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][1]
Connections <- newXMLNode("Connections")
#All connections
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes(origin ,
model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][1] ,
port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][2] )
destination <-  newXMLNode("destination")
addAttributes(origin,
model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[[1]][1],
port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[[1]][2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
Connections <- newXMLNode("Connections")
#All connections
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes(origin ,
model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][1] ,
port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][2] )
destination <-  newXMLNode("destination")
addAttributes(destination,
model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[[1]][1],
port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[[1]][2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
#CropML2Composite - RECORD
# H.Raynal
#Project AMEI
setwd("C:/Users/hraynal/EspaceTravailBadet/Projets/Projet_MFPC/AMEI/CropML/CropMLComposition")
# Load the package required to read XML files.
library("XML")
library("methods")
inputFile <- "EnergyBalance.xml"
# Give the input file name to the function.
result <- xmlTreeParse(file = inputFile)
# Print the result.
#print(result)
#========================================
# Get the nodes and their attributes
#========================================
doc <-xmlParse(inputFile)
#Parsing name of the "composite model"/"coupled model"
ModelComposition<- getNodeSet(doc, "//ModelComposition")
ModelCompositionName<- sapply(ModelComposition, function(el) xmlGetAttr(el, "name"))
#Parsing "Composition" node in order to get the list of "model unit" / "Atomic Model"
CompositionList <- getNodeSet(doc, "//Composition")
SubmodelList <- getNodeSet(doc,"//Model")
SubmodelName <- sapply(ModelList, function(el) xmlGetAttr(el, "name"))
SubmodelDynamic <- sapply(ModelList, function(el) xmlGetAttr(el, "id"))
SubmodelFilename <- sapply(ModelList, function(el) xmlGetAttr(el, "Filename"))
#Parsing "Links" node in order to get the list of links/connections between Model units
Links <- getNodeSet(doc, "//Links")
InputLink <- getNodeSet(doc, "//InputLink")
InputLinkSourceList <- sapply(InputLink, function(el) xmlGetAttr(el, "source"))
InputLinkSourceTarget <- sapply(InputLink, function(el) xmlGetAttr(el, "target"))
OutputLink <- getNodeSet(doc, "//OutputLink")
OutputLinkSourceList <- sapply(OutputLink, function(el) xmlGetAttr(el, "source"))
OutputLinkSourceTarget <- sapply(OutputLink, function(el) xmlGetAttr(el, "target"))
InternalLink <- getNodeSet(doc, "//InternalLink")
InternalLinkSourceList <- sapply(InternalLink, function(el) xmlGetAttr(el, "source"))
InternalLinkTargetList <- sapply(InternalLink, function(el) xmlGetAttr(el, "target"))
# ====================================================================
# Generate "vpz file" associated to Coupled Model (compliant to RECORD)
# ====================================================================
# To read empty.vpz file
emptyFile <- "empty2.vpz"
# To give the input file name to the function.
emptyResult <- xmlParse(file = emptyFile)
NodeStructure <- getNodeSet(emptyResult, "//structures")
NodeModel <- getNodeSet(emptyResult,"//model")
NodeDynamics <- getNodeSet(emptyResult, "//dynamics")
NodeExperiment <- getNodeSet(emptyResult, "//experiment")
NodeConditions<- getNodeSet(emptyResult, "//conditions")
NodeSubModels <- getNodeSet(emptyResult, "//submodels")
ModelName<- sapply(ModelList, function(el) xmlGetAttr(el, "name"))
#To create the node "submodels" associated to the atomic model
#===========================================================
Model <- newXMLNode("model")
addAttributes(Model, y="109", x="53", observables="",
name=ModelCompositionName, height="50",
conditions="", width="50", type="coupled")
cat(saveXML(Model), "\n")
#List all the Submodels
Submodels <- newXMLNode("submodels")
#All submodels
Submodel <- newXMLNode("Model")
SubmodelNode <- sapply( SubmodelName, function(Out) newXMLNode("Submodel", attrs=c(name=Out )))
Submodels <- addChildren(Submodels, SubmodelNode)
Submodel <- addChildren( Submodel, Submodels)
Model <- addChildren( Model, Submodel)
cat(saveXML(Model), "\n")
#To create the node "connections" associated to the atomic model
#===========================================================
Connections <- newXMLNode("Connections")
#All connections
cmpt <- length(InternalLinkTargetList)
for(i in 1:cmpt) {
Connection <- newXMLNode("connection")
addAttributes(Connection, type="internal")
origin <- newXMLNode("origin")
addAttributes(origin ,
model=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][1] ,
port=(strsplit(InternalLinkSourceList[cmpt],".",fixed=TRUE))[[1]][2] )
destination <-  newXMLNode("destination")
addAttributes(destination,
model=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[[1]][1],
port=(strsplit(InternalLinkTargetList[cmpt],".",fixed=TRUE))[[1]][2])
Connection <- addChildren( Connection, origin)
Connection <- addChildren( Connection, destination)
Connections <- addChildren(Connections,Connection)
}
Model <- addChildren( Model, Connections)
cat(saveXML(Model), "\n")
saveXML(Model, file="CropMLcomposition.vpz", prefix="<?xml version=2.0 encoding=UTF-8?>")
